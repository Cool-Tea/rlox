// syntax

Program = { SOI ~ Decl* ~ EOI }

Decl = { ClassDecl | FunDecl | VarDecl | Stmt }

ClassDecl = { Class ~ Ident ~ (Inherit ~ Ident)? ~ LBrace ~ Func* ~ RBrace }

FunDecl = { Fun ~ Func }

VarDecl = { Var ~ Ident ~ (Assign ~ Expr)? ~ SemiColon }

Stmt = { ExprStmt | ForStmt | IfStmt | PrintStmt | RetStmt | WhileStmt | Block }

ExprStmt = { Expr ~ SemiColon }

ForStmt = {
    For ~ LParen ~ (VarDecl | ExprStmt | SemiColon) ~ Expr? ~ SemiColon ~ Expr? ~ RParen ~ Stmt
}

IfStmt = {
    If ~ LParen ~ Expr ~ RParen ~ Stmt ~ (Else ~ Stmt)?
}

PrintStmt = { Print ~ Expr ~ SemiColon }

RetStmt = { Return ~ Expr? ~ SemiColon }

WhileStmt = {
    While ~ LParen ~ Expr ~ RParen ~ Stmt
}

Block = { LBrace ~ Decl* ~ RBrace }

Expr = { Call ~ Assign ~ Expr | Ident ~ Assign ~ Expr | LogicOr }

LogicOr = { LogicAnd ~ (Or ~ LogicAnd)* }

LogicAnd = { Equal ~ (And ~ Equal)* }

Equal = { Comp ~ ((Ne | Eq) ~ Comp)* }

Comp = { Term ~ ((Gt | Ge | Lt | Le) ~ Term)* }

Term = { Factor ~ ((Add | Sub) ~ Factor)* }

Factor = { Unary ~ ((Mul | Div) ~ Unary)* }

Unary = { (Not | Minus) ~ Unary | Call }

Call = { Primary ~ (LParen ~ Args? ~ RParen | Dot ~ Ident)* }

Primary = {
    True
  | False
  | Nil
  | This
  | Num
  | String
  | Ident
  | LParen ~ Expr ~ RParen
  | Super ~ Dot ~ Ident
}

Func = { Ident ~ LParen ~ Params? ~ RParen ~ Block }

Params = { Ident ~ (Comma ~ Ident)* }

Args = { Expr ~ (Comma ~ Expr)* }

// lex rule

Num = { ASCII_DIGIT+ ~ (Dot ~ ASCII_DIGIT*)? }

String = @{ "\"" ~ (!"\"" ~ ANY)* ~ "\"" }

Ident = { ASCII_ALPHA ~ ASCII_ALPHANUMERIC* }

Class = { "class" }

Inherit = { "<" }

LBrace = { "{" }

RBrace = { "}" }

LParen = { "(" }

RParen = { ")" }

Dot = { "." }

Fun = { "fun" }

Var = { "var" }

Assign = { "=" }

SemiColon = { ";" }

For = { "for" }

If = { "if" }

Else = { "else" }

Print = { "print" }

Return = { "return" }

While = { "while" }

Or = { "or" }

And = { "and" }

Eq = { "==" }

Ne = { "!=" }

Gt = { ">" }

Ge = { ">=" }

Lt = { "<" }

Le = { "<=" }

Add = { "+" }

Sub = { "-" }

Mul = { "*" }

Div = { "/" }

Not = { "!" }

Minus = { "-" }

True = { "true" }

False = { "false" }

Nil = { "nil" }

This = { "this" }

Super = { "super" }

Comma = { "," }

// skip white space

Whitespace = _{ WHITE_SPACE }
